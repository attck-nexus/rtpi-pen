# RTPI-PEN: Red Team Penetration Infrastructure
# Multi-Container Docker Compose Configuration (PRIMARY)
# This is the main deployment method - prioritized over single container approach

version: '3.8'

networks:
  rtpi_frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
  rtpi_backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.29.0.0/16
  rtpi_database:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.30.0.0/16
  sysreptor_default:
    driver: bridge

volumes:
  # Core Infrastructure Volumes
  rtpi_database_data:
    driver: local
  rtpi_cache_data:
    driver: local
  rtpi_orchestrator_data:
    driver: local
  rtpi_tools_data:
    driver: local
  rtpi_healer_data:
    driver: local
  
  # Application Service Volumes
  sysreptor-app-data:
    driver: local
  sysreptor-caddy-data:
    driver: local
  registry_data:
    driver: local

services:
  # =============================================================================
  # SELF-HEALING INFRASTRUCTURE
  # =============================================================================

  rtpi-healer:
    build:
      context: ./services/rtpi-healer
      dockerfile: Dockerfile
    image: rtpi-pen/healer:latest
    container_name: rtpi-healer
    restart: unless-stopped
    user: root  # Run as root for Docker socket access
    privileged: true  # Grant full Docker access
    networks:
      - rtpi_frontend
      - rtpi_backend
      - rtpi_database
    ports:
      - "8888:8888"  # Health monitoring API
    volumes:
      - rtpi_healer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /opt:/opt
      - ./:/home/cmndcntrl/rtpi-pen:ro
    environment:
      - PYTHONUNBUFFERED=1
      - DOCKER_HOST=unix:///var/run/docker.sock
    depends_on:
      - rtpi-database
      - rtpi-cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # System initialization service
  rtpi-init:
    build:
      context: ./services/rtpi-healer
      dockerfile: Dockerfile
    image: rtpi-pen/healer:latest
    container_name: rtpi-init
    restart: "no"
    networks:
      - rtpi_backend
    volumes:
      - /opt:/opt
      - ./:/home/cmndcntrl/rtpi-pen:ro
    command: ["/bin/bash", "/opt/rtpi-healer/scripts/init-system.sh"]
    user: root
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # CORE INFRASTRUCTURE SERVICES
  # =============================================================================

  rtpi-database:
    build:
      context: ./services/rtpi-database
      dockerfile: Dockerfile
    image: rtpi-pen/database:latest
    container_name: rtpi-database
    restart: unless-stopped
    networks:
      - rtpi_database
      - rtpi_backend
    volumes:
      - rtpi_database_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=rtpi_main
      - POSTGRES_USER=rtpi
      - POSTGRES_PASSWORD=rtpi_secure_password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "rtpi", "-d", "rtpi_main"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  rtpi-cache:
    build:
      context: ./services/rtpi-cache
      dockerfile: Dockerfile
    image: rtpi-pen/cache:latest
    container_name: rtpi-cache
    restart: unless-stopped
    networks:
      - rtpi_backend
    volumes:
      - rtpi_cache_data:/var/lib/redis
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  rtpi-orchestrator:
    build:
      context: ./services/rtpi-orchestrator
      dockerfile: Dockerfile
    image: rtpi-pen/orchestrator:latest
    container_name: rtpi-orchestrator
    restart: unless-stopped
    networks:
      - rtpi_frontend
      - rtpi_backend
    ports:
      - "9444:9000"  # Portainer UI (external access)
    volumes:
      - rtpi_orchestrator_data:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  rtpi-tools:
    build:
      context: ./services/rtpi-tools
      dockerfile: Dockerfile
    image: rtpi-pen/tools:latest
    container_name: rtpi-tools
    restart: unless-stopped
    networks:
      - rtpi_backend
    volumes:
      - rtpi_tools_data:/home/rtpi-tools
      - ./configs:/opt/configs:ro
    environment:
      - TERM=xterm-256color
    stdin_open: true
    tty: true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  rtpi-proxy:
    build:
      context: ./services/rtpi-proxy
      dockerfile: Dockerfile
    image: rtpi-pen/proxy:latest
    container_name: rtpi-proxy
    restart: unless-stopped
    networks:
      - rtpi_frontend
      - rtpi_backend
    ports:
      - "80:80"   # HTTP (redirects to HTTPS)
      - "443:443" # HTTPS (main interface)
    volumes:
      - /opt/rtpi-pen/certs:/opt/rtpi-pen/certs:ro
    depends_on:
      - rtpi-orchestrator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # KASM WORKSPACES INTEGRATION
  # =============================================================================
  # Note: Kasm is installed natively via fresh-rtpi-pen.sh
  # Native Kasm installation runs on https://localhost:8443
  # This section is reserved for future Kasm integration services if needed

  # =============================================================================
  # SYSREPTOR STACK
  # =============================================================================

  sysreptor-app:
    image: syslifters/sysreptor:2025.37
    container_name: sysreptor-app
    restart: unless-stopped
    networks:
      - sysreptor_default
      - rtpi_backend
      - rtpi_database
    ports:
      - "9000:8000"  # External access to SysReptor
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - sysreptor-app-data:/app/data
    depends_on:
      - rtpi-database
      - sysreptor-redis
    command: /bin/bash /app/api/start.sh
    env_file:
      - ./configs/rtpi-sysreptor/app.env
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  sysreptor-caddy:
    image: caddy:latest
    container_name: sysreptor-caddy
    restart: unless-stopped
    networks:
      - sysreptor_default
      - rtpi_frontend
    ports:
      - "7777:7777"  # External access to Caddy proxy
    volumes:
      - sysreptor-caddy-data:/data
      - ./configs/rtpi-sysreptor/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
    command: caddy reverse-proxy --from :7777 --to sysreptor-app:8000
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"


  sysreptor-redis:
    image: bitnami/redis:7.2
    container_name: sysreptor-redis
    restart: unless-stopped
    networks:
      - sysreptor_default
      - rtpi_backend
    environment:
      - REDIS_PASSWORD=sysreptorredispassword
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # SECURITY SERVICES
  # =============================================================================
  # Note: Empire C2 is installed natively via fresh-rtpi-pen.sh
  # Native Empire installation runs on http://localhost:1337
  # This section is reserved for future containerized security services if needed

  # =============================================================================
  # UTILITY SERVICES
  # =============================================================================

  registry:
    image: registry:latest
    container_name: local-registry
    restart: unless-stopped
    networks:
      - rtpi_backend
    ports:
      - "5001:5000"  # Docker Registry (external access - changed from 5000 to avoid conflict)
    volumes:
      - registry_data:/var/lib/registry
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  node:
    image: node:latest
    container_name: node-service
    restart: unless-stopped
    networks:
      - rtpi_backend
    ports:
      - "3500:3500"  # Node.js service (external access)
    command: ["node", "-e", "require('http').createServer((req,res)=>{res.end('Node.js service running')}).listen(3500)"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

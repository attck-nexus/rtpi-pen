# RTPI-PEN: Red Team Penetration Infrastructure
# Multi-Container Docker Compose Configuration (PRIMARY)
# This is the main deployment method - prioritized over single container approach

version: '3.8'

networks:
  rtpi_frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  rtpi_backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16
  rtpi_database:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/16
  kasm_default_network:
    driver: bridge
  sysreptor_default:
    driver: bridge

volumes:
  # Core Infrastructure Volumes
  rtpi_database_data:
    driver: local
  rtpi_cache_data:
    driver: local
  rtpi_orchestrator_data:
    driver: local
  rtpi_tools_data:
    driver: local
  
  # Application Service Volumes
  sysreptor-app-data:
    driver: local
  sysreptor-db-data:
    driver: local
  sysreptor-caddy-data:
    driver: local
  kasm_db_1.15.0:
    driver: local
  empire_data:
    driver: local
  registry_data:
    driver: local

services:
  # =============================================================================
  # CORE INFRASTRUCTURE SERVICES
  # =============================================================================

  rtpi-database:
    build:
      context: ./services/rtpi-database
      dockerfile: Dockerfile
    image: rtpi-pen/database:latest
    container_name: rtpi-database
    restart: unless-stopped
    networks:
      - rtpi_database
      - rtpi_backend
    volumes:
      - rtpi_database_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=rtpi_main
      - POSTGRES_USER=rtpi
      - POSTGRES_PASSWORD=rtpi_secure_password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "rtpi", "-d", "rtpi_main"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  rtpi-cache:
    build:
      context: ./services/rtpi-cache
      dockerfile: Dockerfile
    image: rtpi-pen/cache:latest
    container_name: rtpi-cache
    restart: unless-stopped
    networks:
      - rtpi_backend
    volumes:
      - rtpi_cache_data:/var/lib/redis
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  rtpi-orchestrator:
    build:
      context: ./services/rtpi-orchestrator
      dockerfile: Dockerfile
    image: rtpi-pen/orchestrator:latest
    container_name: rtpi-orchestrator
    restart: unless-stopped
    networks:
      - rtpi_frontend
      - rtpi_backend
    ports:
      - "9444:9000"  # Portainer UI (external access)
    volumes:
      - rtpi_orchestrator_data:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  rtpi-tools:
    build:
      context: ./services/rtpi-tools
      dockerfile: Dockerfile
    image: rtpi-pen/tools:latest
    container_name: rtpi-tools
    restart: unless-stopped
    networks:
      - rtpi_backend
    volumes:
      - rtpi_tools_data:/home/rtpi-tools
      - ./configs:/opt/configs:ro
    environment:
      - TERM=xterm-256color
    stdin_open: true
    tty: true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  rtpi-proxy:
    build:
      context: ./services/rtpi-proxy
      dockerfile: Dockerfile
    image: rtpi-pen/proxy:latest
    container_name: rtpi-proxy
    restart: unless-stopped
    networks:
      - rtpi_frontend
      - rtpi_backend
    ports:
      - "80:80"   # HTTP (redirects to HTTPS)
      - "443:443" # HTTPS (main interface)
    depends_on:
      - rtpi-orchestrator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # KASM WORKSPACES STACK
  # =============================================================================

  kasm_db:
    container_name: kasm_db
    image: postgres:${POSTGRES_VERSION_KASM:-12-alpine}
    healthcheck:
      test: "pg_isready --username=${POSTGRES_USER_KASM:-kasmapp} && cat /proc/1/cmdline | grep -q '^postgres'"
      timeout: 5s
      retries: 20
    networks:
      - kasm_default_network
      - rtpi_backend
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD_KASM:-SjenXuTppFFSWIIKjaAJ}"
      POSTGRES_USER: ${POSTGRES_USER_KASM:-kasmapp}
      POSTGRES_DB: ${POSTGRES_DB_KASM:-kasm}
    volumes:
      - /opt/kasm/${KASM_VERSION:-1.15.0}/conf/database/data.sql:/docker-entrypoint-initdb.d/data.sql
      - /opt/kasm/${KASM_VERSION:-1.15.0}/conf/database/pg_hba.conf:/var/lib/postgresql/conf/pg_hba.conf
      - /opt/kasm/${KASM_VERSION:-1.15.0}/conf/database/postgresql.conf:/var/lib/postgresql/conf/postgresql.conf
      - /opt/kasm/${KASM_VERSION:-1.15.0}/conf/database/:/tmp/
      - /opt/kasm/${KASM_VERSION:-1.15.0}/certs/db_server.crt:/etc/ssl/certs/db_server.crt
      - /opt/kasm/${KASM_VERSION:-1.15.0}/certs/db_server.key:/etc/ssl/certs/db_server.key
      - /opt/kasm/${KASM_VERSION:-1.15.0}/log/postgres/:/var/log/postgres/
      - kasm_db_1.15.0:/var/lib/postgresql/data
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: postgres -c ssl=on -c ssl_cert_file=/etc/ssl/certs/db_server.crt -c ssl_key_file=/etc/ssl/certs/db_server.key -c config_file=/var/lib/postgresql/conf/postgresql.conf -c hba_file=/var/lib/postgresql/conf/pg_hba.conf
    restart: "always"

  kasm_redis:
    container_name: kasm_redis
    command: ["sh", "-c", "redis-server --requirepass $${REDIS_PASSWORD}"]
    user: "${KASM_UID:-1000}:${KASM_GID:-1000}"
    image: redis:${REDIS_KASM_VERSION:-5-alpine}
    networks:
      - kasm_default_network
      - rtpi_backend
    environment:
      REDIS_PASSWORD: "CwoZWGpBk5PZ3zD79fIK"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: "always"

  kasm_api:
    container_name: kasm_api
    user: "${KASM_UID:-1000}:${KASM_GID:-1000}"
    image: "kasmweb/api:${KASM_VERSION:-1.15.0}"
    read_only: true
    networks:
      - kasm_default_network
      - rtpi_backend
    volumes:
      - /opt/kasm/${KASM_VERSION:-1.15.0}:/opt/kasm/current
      - /opt/kasm/${KASM_VERSION:-1.15.0}/tmp/api:/tmp
    depends_on:
      - kasm_db
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  kasm_manager:
    container_name: kasm_manager
    user: "${KASM_UID:-1000}:${KASM_GID:-1000}"
    image: "kasmweb/manager:${KASM_VERSION:-1.15.0}"
    read_only: true
    networks:
      - kasm_default_network
      - rtpi_backend
    volumes:
      - /opt/kasm/${KASM_VERSION:-1.15.0}:/opt/kasm/current
    depends_on:
      - kasm_db
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  kasm_agent:
    container_name: kasm_agent
    user: root
    image: "kasmweb/agent:${KASM_VERSION:-1.15.0}"
    read_only: true
    networks:
      - kasm_default_network
      - rtpi_backend
    volumes:
      - /opt/kasm/${KASM_VERSION:-1.15.0}:/opt/kasm/current
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/kasm/${KASM_VERSION:-1.15.0}/conf/nginx:/etc/nginx/conf.d
    depends_on:
      - kasm_manager
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  kasm_share:
    container_name: kasm_share
    user: root
    image: "kasmweb/share:${KASM_VERSION:-1.15.0}"
    read_only: true
    networks:
      - kasm_default_network
      - rtpi_backend
    volumes:
      - /opt/kasm/${KASM_VERSION:-1.15.0}:/opt/kasm/current
    restart: always
    depends_on:
      - kasm_db
      - kasm_redis
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  kasm_guac:
    container_name: kasm_guac
    user: "${KASM_UID:-1000}:${KASM_GID:-1000}"
    image: "kasmweb/kasm-guac:${KASM_VERSION:-1.15.0}"
    read_only: true
    networks:
      - kasm_default_network
      - rtpi_backend
    volumes:
      - /opt/kasm/${KASM_VERSION:-1.15.0}:/opt/kasm/current
      - /opt/kasm/${KASM_VERSION:-1.15.0}/tmp/guac:/tmp
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  kasm_proxy:
    container_name: kasm_proxy
    image: "kasmweb/nginx:${NGINX_VERSION:-1.25.3}"
    ports:
      - "8443:443" # HTTPS port for Kasm proxy (external access)
    networks:
      - kasm_default_network
      - rtpi_frontend
    volumes:
      - /opt/kasm/${KASM_VERSION:-1.15.0}/conf/nginx:/etc/nginx/conf.d:ro
      - /opt/kasm/${KASM_VERSION:-1.15.0}/certs/kasm_nginx.key:/etc/ssl/private/kasm_nginx.key
      - /opt/kasm/${KASM_VERSION:-1.15.0}/certs/kasm_nginx.crt:/etc/ssl/certs/kasm_nginx.crt
      - /opt/kasm/${KASM_VERSION:-1.15.0}/www:/srv/www:ro
      - /opt/kasm/${KASM_VERSION:-1.15.0}/log/nginx:/var/log/external/nginx/
      - /opt/kasm/${KASM_VERSION:-1.15.0}/log/logrotate:/var/log/external/logrotate/
    depends_on:
      - kasm_manager
      - kasm_api
      - kasm_agent
      - kasm_share
      - kasm_guac
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # SYSREPTOR STACK
  # =============================================================================

  sysreptor-app:
    image: syslifters/sysreptor:2025.37
    container_name: sysreptor-app
    restart: unless-stopped
    networks:
      - sysreptor_default
      - rtpi_backend
    ports:
      - "9000:8000"  # External access to SysReptor
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - sysreptor-app-data:/app/data
    depends_on:
      - sysreptor-db
      - sysreptor-redis
    command: /bin/bash /app/api/start.sh
    env_file:
      - ./configs/rtpi-sysreptor/app.env
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  sysreptor-caddy:
    image: caddy:latest
    container_name: sysreptor-caddy
    restart: unless-stopped
    networks:
      - sysreptor_default
      - rtpi_frontend
    ports:
      - "7777:7777"  # External access to Caddy proxy
    volumes:
      - sysreptor-caddy-data:/data
      - ./configs/rtpi-sysreptor/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
    command: caddy reverse-proxy --from :7777 --to sysreptor-app:8000
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  sysreptor-db:
    image: postgres:14
    container_name: sysreptor-db
    restart: unless-stopped
    networks:
      - sysreptor_default
      - rtpi_database
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - sysreptor-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=sysreptorpassword
      - POSTGRES_USER=sysreptor
      - POSTGRES_DB=sysreptor
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  sysreptor-redis:
    image: bitnami/redis:7.2
    container_name: sysreptor-redis
    restart: unless-stopped
    networks:
      - sysreptor_default
      - rtpi_backend
    environment:
      - REDIS_PASSWORD=sysreptorredispassword
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # SECURITY SERVICES
  # =============================================================================

  ps-empire:
    image: bcsecurity/empire:latest
    container_name: ps-empire
    restart: unless-stopped
    networks:
      - rtpi_backend
      - rtpi_frontend
    ports:
      - "1337:1337"  # Empire C2 (external access)
      - "5000:5000"   # Empire REST API (external access)
    volumes:
      - empire_data:/empire
    command: ./ps-empire server
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # UTILITY SERVICES
  # =============================================================================

  registry:
    image: registry:latest
    container_name: local-registry
    restart: unless-stopped
    networks:
      - rtpi_backend
    ports:
      - "5001:5000"  # Docker Registry (external access - changed from 5000 to avoid conflict)
    volumes:
      - registry_data:/var/lib/registry
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  node:
    image: node:latest
    container_name: node-service
    restart: unless-stopped
    networks:
      - rtpi_backend
    ports:
      - "3500:3500"  # Node.js service (external access)
    command: ["node", "-e", "require('http').createServer((req,res)=>{res.end('Node.js service running')}).listen(3500)"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

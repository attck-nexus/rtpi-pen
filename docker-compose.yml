networks:
  rtpi_bridge:
    driver: bridge
  rtpi_host:
    driver: host
  kasm_default_network:
    driver: bridge
  rtpi_none:
    driver: "null"
  sysreptor_default:
    driver: bridge
  npm_network:
    driver: bridge

volumes:
  # Named volumes for persistence
  sysreptor-app-data:
    driver: local
  sysreptor-db-data:
    driver: local
  sysreptor-caddy-data:
    driver: local
  kasm_db_1.15.0:
    driver: local
  portainer_data:
    driver: local
  npm_data:
    driver: local
  npm_letsencrypt:
    driver: local
  npm_mysql:
    driver: local
  empire_data:
    driver: local
  registry_data:
    driver: local

services:
  # Main orchestrator container (rtpi-pen)
  rtpi-pen:
    build:
      context: .
      dockerfile: Dockerfile
    image: cmndcntrl/rtpi-pen:latest
    container_name: rtpi-pen
    restart: unless-stopped
    networks:
      - rtpi_bridge
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - ./configs:/opt/rtpi-pen/configs:ro
      - ./setup:/opt/rtpi-pen/setup:ro
    command: ["portainer"]
    ports:
      - "9444:9443" # Portainer HTTPS UI - changed from 9443 to 9444 to avoid conflict

  # Nginx Proxy Manager
  npm_app:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: npm_app
    restart: unless-stopped
    ports:
      - '80:80'   # Public HTTP Port
      - '81:81'   # Admin Web Port
      - '443:443' # Public HTTPS Port
    environment:
      DB_MYSQL_HOST: "npm_db"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: "T0t4llyCh4ng3Th15P455word"
      DB_MYSQL_NAME: "npm"
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt
    networks:
      - npm_network
      - rtpi_bridge
    depends_on:
      - npm_db

  npm_db:
    image: 'jc21/mariadb-aria:latest'
    container_name: npm_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 'T0t4llyCh4ng3Th15P455word'
      MYSQL_DATABASE: 'npm'
      MYSQL_USER: 'npm'
      MYSQL_PASSWORD: 'T0t4llyCh4ng3Th15P455word'
    volumes:
      - npm_mysql:/var/lib/mysql
    networks:
      - npm_network

  # Docker Registry
  registry:
    image: registry:latest
    container_name: local-registry
    restart: unless-stopped
    networks:
      - rtpi_bridge
    ports:
      - "5000:5000"
    volumes:
      - registry_data:/var/lib/registry

  # Kasm Workspaces stack
  # Kasm Workspaces stack - Using configuration from rtpi-kasm
  kasm_db:
    container_name: kasm_db
    image: postgres:${POSTGRES_VERSION_KASM:-12-alpine}
    healthcheck:
      test: "pg_isready --username=${POSTGRES_USER_KASM:-kasmapp} && cat /proc/1/cmdline | grep -q '^postgres'"
      timeout: 5s
      retries: 20
    networks:
      - kasm_default_network
      - rtpi_bridge
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD_KASM:-SjenXuTppFFSWIIKjaAJ}"
      POSTGRES_USER: ${POSTGRES_USER_KASM:-kasmapp}
      POSTGRES_DB: ${POSTGRES_DB_KASM:-kasm}
    volumes:
      - /opt/kasm/${KASM_VERSION:-1.15.0}/conf/database/data.sql:/docker-entrypoint-initdb.d/data.sql
      - /opt/kasm/${KASM_VERSION:-1.15.0}/conf/database/pg_hba.conf:/var/lib/postgresql/conf/pg_hba.conf
      - /opt/kasm/${KASM_VERSION:-1.15.0}/conf/database/postgresql.conf:/var/lib/postgresql/conf/postgresql.conf
      - /opt/kasm/${KASM_VERSION:-1.15.0}/conf/database/:/tmp/
      - /opt/kasm/${KASM_VERSION:-1.15.0}/certs/db_server.crt:/etc/ssl/certs/db_server.crt
      - /opt/kasm/${KASM_VERSION:-1.15.0}/certs/db_server.key:/etc/ssl/certs/db_server.key
      - /opt/kasm/${KASM_VERSION:-1.15.0}/log/postgres/:/var/log/postgres/
      - kasm_db_1.15.0:/var/lib/postgresql/data
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "20"
    command: postgres -c ssl=on -c ssl_cert_file=/etc/ssl/certs/db_server.crt -c ssl_key_file=/etc/ssl/certs/db_server.key -c config_file=/var/lib/postgresql/conf/postgresql.conf -c hba_file=/var/lib/postgresql/conf/pg_hba.conf
    restart: "always"

  kasm_redis:
    container_name: kasm_redis
    command: ["sh", "-c", "redis-server --requirepass $${REDIS_PASSWORD}"]
    user: "${KASM_UID:-1000}:${KASM_GID:-1000}"
    image: redis:${REDIS_KASM_VERSION:-5-alpine}
    networks:
      - kasm_default_network
      - rtpi_bridge
    environment:
      REDIS_PASSWORD: "CwoZWGpBk5PZ3zD79fIK"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "20"
    restart: "always"

  kasm_api:
    container_name: kasm_api
    user: "${KASM_UID:-1000}:${KASM_GID:-1000}"
    image: "kasmweb/api:${KASM_VERSION:-1.15.0}"
    read_only: true
    networks:
      - kasm_default_network
      - rtpi_bridge
    volumes:
      - /opt/kasm/${KASM_VERSION:-1.15.0}:/opt/kasm/current
      - /opt/kasm/${KASM_VERSION:-1.15.0}/tmp/api:/tmp
    depends_on:
      - kasm_db
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "20"

  kasm_manager:
    container_name: kasm_manager
    user: "${KASM_UID:-1000}:${KASM_GID:-1000}"
    image: "kasmweb/manager:${KASM_VERSION:-1.15.0}"
    read_only: true
    networks:
      - kasm_default_network
      - rtpi_bridge
    volumes:
      - /opt/kasm/${KASM_VERSION:-1.15.0}:/opt/kasm/current
    depends_on:
      - kasm_db
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "20"

  kasm_agent:
    container_name: kasm_agent
    user: root
    image: "kasmweb/agent:${KASM_VERSION:-1.15.0}"
    read_only: true
    networks:
      - kasm_default_network
      - rtpi_bridge
    volumes:
      - /opt/kasm/${KASM_VERSION:-1.15.0}:/opt/kasm/current
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/kasm/${KASM_VERSION:-1.15.0}/conf/nginx:/etc/nginx/conf.d
    depends_on:
      - kasm_manager
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "20"

  kasm_share:
    container_name: kasm_share
    user: root
    image: "kasmweb/share:${KASM_VERSION:-1.15.0}"
    read_only: true
    networks:
      - kasm_default_network
      - rtpi_bridge
    volumes:
      - /opt/kasm/${KASM_VERSION:-1.15.0}:/opt/kasm/current
    restart: always
    depends_on:
      - kasm_db
      - kasm_redis
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "20"

  kasm_guac:
    container_name: kasm_guac
    user: "${KASM_UID:-1000}:${KASM_GID:-1000}"
    image: "kasmweb/kasm-guac:${KASM_VERSION:-1.15.0}"
    read_only: true
    networks:
      - kasm_default_network
      - rtpi_bridge
    volumes:
      - /opt/kasm/${KASM_VERSION:-1.15.0}:/opt/kasm/current
      - /opt/kasm/${KASM_VERSION:-1.15.0}/tmp/guac:/tmp
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "20"

  kasm_proxy:
    container_name: kasm_proxy
    image: "kasmweb/nginx:${NGINX_VERSION:-1.25.3}"
    ports:
      - "8443:443" # Changed from 443:443 to avoid conflict with npm_app
    networks:
      - kasm_default_network
      - rtpi_bridge
    volumes:
      - /opt/kasm/${KASM_VERSION:-1.15.0}/conf/nginx:/etc/nginx/conf.d:ro
      - /opt/kasm/${KASM_VERSION:-1.15.0}/certs/kasm_nginx.key:/etc/ssl/private/kasm_nginx.key
      - /opt/kasm/${KASM_VERSION:-1.15.0}/certs/kasm_nginx.crt:/etc/ssl/certs/kasm_nginx.crt
      - /opt/kasm/${KASM_VERSION:-1.15.0}/www:/srv/www:ro
      - /opt/kasm/${KASM_VERSION:-1.15.0}/log/nginx:/var/log/external/nginx/
      - /opt/kasm/${KASM_VERSION:-1.15.0}/log/logrotate:/var/log/external/logrotate/
    depends_on:
      - kasm_manager
      - kasm_api
      - kasm_agent
      - kasm_share
      - kasm_guac
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "20"

  # Empire C2 framework
  ps-empire:
    image: bcsecurity/empire:latest
    container_name: ps-empire
    restart: unless-stopped
    networks:
      - rtpi_bridge
    ports:
      - "1337:1337"
      - "5000:5000"
    volumes:
      - empire_data:/empire
    command: ./ps-empire server

  # Node.js service
  node:
    image: node:latest
    container_name: node
    restart: unless-stopped
    networks:
      - rtpi_bridge
    ports:
      - "3500:3500"

  # SysReptor stack
  sysreptor-app:
    image: syslifters/sysreptor:2025.37
    container_name: sysreptor-app
    restart: unless-stopped
    networks:
      - sysreptor_default
      - rtpi_bridge
    ports:
      - "9000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - sysreptor-app-data:/app/data
    depends_on:
      - sysreptor-db
      - sysreptor-redis
    command: /bin/bash /app/api/start.sh
    env_file:
      - ./configs/rtpi-sysreptor/app.env

  sysreptor-caddy:
    image: caddy:latest
    container_name: sysreptor-caddy
    restart: unless-stopped
    networks:
      - sysreptor_default
      - rtpi_bridge
    ports:
      - "7777:7777"
    volumes:
      - sysreptor-caddy-data:/data
      - ./configs/rtpi-sysreptor/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
    command: caddy reverse-proxy --from :7777 --to sysreptor-app:8000

  sysreptor-db:
    image: postgres:14
    container_name: sysreptor-db
    restart: unless-stopped
    networks:
      - sysreptor_default
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - sysreptor-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=sysreptorpassword
      - POSTGRES_USER=sysreptor
      - POSTGRES_DB=sysreptor

  sysreptor-redis:
    image: bitnami/redis:7.2
    container_name: sysreptor-redis
    restart: unless-stopped
    networks:
      - sysreptor_default
    environment:
      - REDIS_PASSWORD=sysreptorredispassword
